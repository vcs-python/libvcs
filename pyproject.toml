[tool.poetry]
name = "libvcs"
version = "0.31.0"
description = "Lite, typed, python utilities for Git, SVN, Mercurial, etc."
license = "MIT"
authors = ["Tony Narlock <tony@git-pull.com>"]
keywords = [
  "libvcs",
  "git",
  "mercurial",
  "hg",
  "svn",
  "subversion",
  "library",
  "lib",
  "wrapper",
  "vcs",
  "version control",
  "scm",
  "clone",
  "checkout",
  "abstraction",
  "version-control",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Environment :: Console",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "Operating System :: POSIX",
  "Operating System :: MacOS :: MacOS X",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Utilities",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Version Control",
  "Topic :: Software Development :: Version Control :: Git",
  "Topic :: Software Development :: Version Control :: Mercurial",
  "Topic :: System :: Shells",
  "Typing :: Typed",
]
homepage = "http://github.com/vcs-python/libvcs/"
readme = "README.md"
packages = [
  { include = "*", from = "src" },
]
include = [
  { path = "CHANGES", format = "sdist" },
  { path = "MIGRATION", format = "sdist" },
  { path = ".tmuxp.yaml", format = "sdist" },
  { path = "tests", format = "sdist" },
  { path = "docs", format = "sdist" },
  { path = "conftest.py", format = "sdist" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/vcs-python/libvcs/issues"
Documentation = "https://libvcs.git-pull.com"
Repository = "https://github.com/vcs-python/libvcs"
Changes = "https://github.com/vcs-python/libvcs/blob/master/CHANGES"

[tool.poetry.dependencies]
python = "^3.9"
typing-extensions = { version = "*", python = '3.10' }

[tool.poetry.group.docs.dependencies]
### Docs ###
sphinx = "*"
furo = "*"
gp-libs = "*"
sphinx-autobuild = "*"
sphinx-autodoc-typehints = "*"
sphinx-inline-tabs = "*"
sphinxext-opengraph = "<0.8" # https://github.com/wpilibsuite/sphinxext-opengraph/issues/100
sphinx-copybutton = "*"
sphinxext-rediraffe = "*"
myst_parser = ">=0.18.1"
linkify-it-py = "*"

[tool.poetry.group.test.dependencies]
### Testing ###
gp-libs = "*"
pytest = "*"
pytest-rerunfailures = "*"
pytest-mock = "*"
pytest-watcher = "*"

[tool.poetry.group.coverage.dependencies]
### Coverage ###
codecov = "*"
coverage = "*"
pytest-cov = "*"

[tool.poetry.group.lint.dependencies]
### Lint ###
ruff = "*"
mypy = "*"

[tool.poetry.plugins.pytest11]
libvcs = "libvcs.pytest_plugin"

[tool.mypy]
strict = true
files = [
  "src",
  "tests",
]

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "docs/conf.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "return NotImplemented",
  "def parse_args",
  "if TYPE_CHECKING:",
  "if t.TYPE_CHECKING:",
  "@overload( |$)",
]

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "UP", # pyupgrade
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "COM", # flake8-commas
  "EM", # flake8-errmsg
  "Q", # flake8-quotes
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
  "TRY", # Trycertatops
  "PERF", # Perflint
  "RUF", # Ruff-specific rules
  "D", # pydocstyle
]
ignore = [
  "COM812", # missing trailing comma, ruff format conflict
]

[tool.ruff.lint.isort]
known-first-party = [
  "libvcs",
]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]

[tool.pytest.ini_options]
addopts = "--tb=short --no-header --showlocals --doctest-modules"
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE"
testpaths = [
  "src/libvcs",
  "tests",
  "docs",
  "README.md",
]
filterwarnings = [
  "ignore:The frontend.Option(Parser)? class.*:DeprecationWarning::",
]

[tool.pytest-watcher]
now = true
ignore_patterns = ["*.py.*.py"]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
